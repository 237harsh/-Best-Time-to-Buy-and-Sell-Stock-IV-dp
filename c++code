class Solution {
public:
    
    
     //we have boundation tha we can obly perform
    //k-times buy sell operation
     int fun(int i,int buy,int c,int n,vector<int>& arr,  vector< vector<vector<int>>>&dp)
    {
         if(c==0)return 0;
        if(i==n)return 0;
        
     int p;
       if( dp[i][buy][c]!=-1)
           return dp[i][buy][c];
        
        if(buy){
         
            p= max( -arr[i]+fun(i+1,0,c,n,arr,dp),0+fun(i+1,1,c,n,arr,dp) );
        }
        else 
            p= max(arr[i]+fun(i+1,1,c-1,n,arr,dp),0+fun(i+1,0,c,n,arr,dp));
     
        return dp[i][buy][c]=p;
    }
    int maxProfit(int k, vector<int>& arr) {
        int n=arr.size(),m=2;
    vector< vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(k+1,-1)));
       return fun(0,1,k,n,arr,dp);
        
    }
};
